candidates = generatePairs(cust_list)
    servedpairs=[]
    candidates2=[]
    LocalSearch(0, route_list, cost_matrix, candidates,candidates2,servedpairs)

    prof = calclulateProfitRoute(route_list)
    total_prof = calclulatetotalProfit(prof)
    print(total_prof)
    for k in route_list:
        print("ROUTE " , k.id ,"LEN: " , len(k.route), "TIME: ", k.time, "CAPACITY: ", k.capacity, "PROFIT: ", prof[k.id])
        

    
    solve(cust_list, route_list, cost_matrix)
    prof = calclulateProfitRoute(route_list)
    total_prof = calclulatetotalProfit(prof)
    print(total_prof)

    candidates2 = generatePairs(cust_list)  
    
    for r in route_list:
        
        servedpairs.append(generateServedPairs(r.route))   

    
    LocalSearch(3, route_list, cost_matrix, candidates,candidates2,servedpairs)

     for k in route_list:
        print("ROUTE " , k.id ,"LEN: " , len(k.route), "TIME: ", k.time, "CAPACITY: ", k.capacity, "PROFIT: ", prof[k.id])

    rt_time = 0
    for i in range(len(route_list[3].route) - 1):
        from_node = route_list[3].route[i]
        to_node = route_list[3].route[i+1]
        
        travel_time = cost_matrix[from_node.id][to_node.id]
        print("DISTANCE FROM NODE: ", from_node.id, "TO: ", to_node.id, "==", travel_time)
        print("TIME OF NODE: ", from_node.serv_time)
        
        rt_time = rt_time + travel_time
        if i != 0:
            rt_time = rt_time + from_node.serv_time 
    print(rt_time)
